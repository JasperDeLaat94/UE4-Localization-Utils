import sys
import getopt
import json


def print_help():
    print("""== ue4tojson ==

Utility script for converting between Unreal Engine and JSON files, should PO files be unsupported.
This script can work two ways:
    1. It can convert UE4 .manifest files (generated by text gather operation) into a JSON file while maintaining Unreal's key convention of <namespace>,<key>.
    2. It can merge a translated JSON file into an UE4 .archive file.

= Usages =
> Display help:
    ue4tojson.py -h
> Convert UE4 manifest file to JSON file:
    ue4tojson.py -m/--manifest <file path> -j/--json <file path>
> Merge JSON file into archive file:
    ue4tojson.py -j/--json <file path> -a/--archive <file path>""")


def manifest_to_json(manifest_path, json_path):
    # Assuming UTF-16, change to UTF-8 if you run into problems.
    with open(manifest_path, 'r', encoding='utf-16') as manifest_file:
        input_json = json.load(manifest_file)
    output_json = {}

    def convert_namespace(namespace, children):
        for child in children:
            for keys in child['Keys']:
                output_json[namespace+","+keys['Key']
                            ] = child['Source']['Text']

    if 'Namespace' in input_json and 'Children' in input_json:
        convert_namespace(input_json['Namespace'], input_json['Children'])

    if 'Subnamespaces' in input_json:
        for subnamespace in input_json['Subnamespaces']:
            convert_namespace(
                subnamespace['Namespace'], subnamespace['Children'])

    if not json_path:
        json_path = "Output.json"

    with open(json_path, "w", encoding='utf-8') as jsonfile:
        json.dump(output_json, jsonfile, ensure_ascii=False, indent=4)


def json_into_archive(json_path, archive_path):
    # Assuming UTF-16, change to UTF-8 if you run into problems.
    with open(archive_path, 'r', encoding='utf-16') as archive_file:
        archive_json = json.load(archive_file)

    # Assuming Localizor files are always UTF-8
    with open(json_path, 'r', encoding='utf-8') as json_file:
        translations_json = json.load(json_file)

    def find_subnamespace(namespace_list, namespace_name):
        for subnamespace in namespace_list:
            if subnamespace['Namespace'] == namespace_name:
                return subnamespace
        return None

    def find_and_replace_translation(namespace_object, key, translation):
        for child in namespace_object['Children']:
            if child['Key'] == key:
                child['Translation']['Text'] = translation
                return

    for translation_key, translation in translations_json.items():
        namespace_key = translation_key.split(',')
        namespace = namespace_key[0]
        key = namespace_key[1]
        if (namespace == ''):
            find_and_replace_translation(archive_json, key, translation)
        else:
            subnamespace = find_subnamespace(
                archive_json['Subnamespaces'], namespace)
            if subnamespace:
                find_and_replace_translation(subnamespace, key, translation)

    with open(archive_path, 'w', encoding='utf-16') as output_file:
        json.dump(archive_json, output_file, ensure_ascii=False, indent=4)


def main(argv):
    manifest_path = ''
    json_path = ''
    archive_path = ''

    try:
        opts, _ = getopt.getopt(
            argv, "hm:j:a:", ["manifest=", "json=", "archive="])
    except getopt.GetoptError:
        print('Invalid arguments, run "ue4tojson.py -h" for help')
        sys.exit(1)

    for opt, arg in opts:
        if opt == '-h':
            print_help()
            sys.exit()
        elif opt in ("-m", "--manifest"):
            manifest_path = arg
        elif opt in ("-j", "--json"):
            json_path = arg
        elif opt in ("-a", "--archive"):
            archive_path = arg

    if manifest_path and archive_path:
        print('Specifying a manifest and archive file is not a valid combination, run "ue4tojson.py -h" for help')
        sys.exit(1)

    if manifest_path:
        manifest_to_json(manifest_path, json_path)
        sys.exit()
    elif json_path and archive_path:
        json_into_archive(json_path, archive_path)
        sys.exit()
    else:
        print('No valid file combination specified, run "ue4tojson.py -h" for help')
        sys.exit(1)


if __name__ == "__main__":
    main(sys.argv[1:])
